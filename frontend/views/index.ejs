<!-- views/index.ejs -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="styles/style.css">
  <title>Fetched Data</title>
</head>
<body>
  <header>
    <h1>Crypto Data Manager</h1>
    <button onclick="fetchAndSaveData()">Fetch and Save Data</button>
    <button onclick="clearDatabase()">Clear Database</button>
    <button onclick="dropTable()">drop table from Database</button>
    <div class="dropdown">
      <button class="dropbtn">Select UCID</button>
      <div class="dropdown-content" id="ucidDropdown">
        <!-- Dropdown items will be inserted here dynamically -->
      </div>
    </div>
  </header>
  <h1>Cryptocurrency Prices</h1>
  
  <table border="1">
    <thead>
      <tr>
        <th>ID</th>
        <th>Status Timestamp</th>
        <th>UCID</th>
        <th>Name</th>
        <th>Price (USD)</th>
        <th>15 min Change (%)</th>
        <th>30 min Change (%)</th>
        <th>1 Hour Change (%)</th>
        <th>24 Hour Change (%)</th>
      </tr>
    </thead>
    <tbody id="recordsTableBody">
      <% data.forEach(function(row) { %>
        <tr>
          <td><%= row.id %></td>
          <td><%= row.status_timestamp %></td>
          <td><%= row.UCID %></td>
          <td><%= row.name %></td>
          <td class="align-right"><%= parseFloat(row.price).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 }) %></td>
          <td class="<%= row.percent_change_15m > 0 ? 'positive' : 'negative' %>"><%= parseFloat(row.percent_change_15m).toFixed(3) %></td>
          <td class="<%= row.percent_change_30m > 0 ? 'positive' : 'negative' %>"><%= parseFloat(row.percent_change_30m).toFixed(3) %></td>         
         
          <td class="<%= row.percent_change_1h > 0 ? 'positive' : 'negative' %>"><%= parseFloat(row.percent_change_1h).toFixed(3) %></td>
          <td class="<%= row.percent_change_24h > 0 ? 'positive' : 'negative' %>"><%= parseFloat(row.percent_change_24h).toFixed(3) %></td>
        </tr>
      <% }); %>
      
    </tbody>
  </table>
  <script>
      fetch('/get-ucids')
      .then(response => response.json())
      .then(data => {
        const dropdown = document.getElementById('ucidDropdown');
        
        // Populate the dropdown with options
        data.forEach(row => {
          const option = document.createElement('a');
          option.href = '#';
          option.textContent = row.name; // Adjust key based on your data
          option.onclick = () => handleAction(row.UCID);
          dropdown.appendChild(option);
        });
      })
      .catch(error => console.error('Error fetching UCIDs:', error));

      function handleAction(ucid) {
        console.log('UCID selected:', ucid);
        // Make a GET request to the server with the selected UCID as a query parameter
          fetch(`/?ucid=${ucid}`)
            .then(response => response.json()) // Assuming the server responds with JSON data
            .then(data => {
              console.log(data)
              // Reload the page to reflect the changes
              const tableBody = document.getElementById('recordsTableBody');
            tableBody.innerHTML = ''; // Clear current records

        data.forEach(record => {
          const row = document.createElement('tr');
          row.innerHTML = `
              <td>${record.id}</td>
              <td>${record.status_timestamp}</td>
              <td>${record.UCID}</td>
              <td>${record.name}</td>
              <td class="align-right">${parseFloat(record.price).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>
              <td class="${record.percent_change_15m > 0 ? 'positive' : 'negative'}">${parseFloat(record.percent_change_15m).toFixed(3)}</td>
              <td class="${record.percent_change_30m > 0 ? 'positive' : 'negative'}">${parseFloat(record.percent_change_30m).toFixed(3)}</td>
              <td class="${record.percent_change_1h > 0 ? 'positive' : 'negative'}">${parseFloat(record.percent_change_1h).toFixed(3)}</td>
              <td class="${record.percent_change_24h > 0 ? 'positive' : 'negative'}">${parseFloat(record.percent_change_24h).toFixed(3)}</td>
            `;
          tableBody.appendChild(row);
     });
      console.log("data is -------------------------------------", data)
    })
    .catch(error => console.error('Error fetching records:', error));
}
    // Function to call the fetchDataAndSave route
    async function fetchAndSaveData() {
      try {
        const response = await fetch('/fetch-save-get', { method: 'POST' });
        // console.log(response)
        if (response.ok) {
          const records = await response.json();
          console.log(records)
          //REFRESH THE DATA ELEMENT WITH THE NEW DATA.
          refreshDataOnPage(records)
        } else {
          console.error('Error fetching and saving data');
        }
      } catch (error) {
        console.error('Error:', error);
      }
    }

    // Function to call the clearDatabase route
    async function clearDatabase() {
      try {
        const response = await fetch('/clearDatabase', { method: 'POST' });
        if (response.ok) {
          alert('Database cleared successfully!');
          // const records = await fetch('/get-from-db', {method: 'POST'});
          // console.log("remaining records ", records)
          location.reload()
          // refreshDataOnPage(records.json); // Reload page to update displayed records
        } else {
          alert('Failed to clear database.');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Error clearing database.');
      }
    }

    async function dropTable() {
      try {
        const response = await fetch('/dropTable', { method: 'POST' });
        if (response.ok) {
          alert('Database dropped successfully!');
          location.reload() // Reload page to update displayed records
        } else {
          alert('Failed to drop database.');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Error dropping database.');
      }
    }

    function refreshDataOnPage(data=null) {
      const tableBody = document.getElementById('recordsTableBody');
            tableBody.innerHTML = ''; // Clear current records

        data.forEach(record => {
          const row = document.createElement('tr');
          row.innerHTML = `
              <td>${record.id}</td>
              <td>${record.status_timestamp}</td>
              <td>${record.UCID}</td>
              <td>${record.name}</td>
              <td class="align-right">${parseFloat(record.price).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>
              <td class="${record.percent_change_15m > 0 ? 'positive' : 'negative'}">${parseFloat(record.percent_change_15m).toFixed(3)}</td>
              <td class="${record.percent_change_30m > 0 ? 'positive' : 'negative'}">${parseFloat(record.percent_change_30m).toFixed(3)}</td>
              <td class="${record.percent_change_1h > 0 ? 'positive' : 'negative'}">${parseFloat(record.percent_change_1h).toFixed(3)}</td>
              <td class="${record.percent_change_24h > 0 ? 'positive' : 'negative'}">${parseFloat(record.percent_change_24h).toFixed(3)}</td>
            `;
          tableBody.appendChild(row);
     });
  }
  </script>
</body>
</html>