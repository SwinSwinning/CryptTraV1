<!-- views/index.ejs -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="styles/style.css">
  <title>Fetched Data</title>
</head>
<body>
  <header>
    <h1>Crypto Data Manager</h1>
    <button onclick="fetchAndSaveData()">Fetch and Save Data</button>
    <!-- <button onclick="clearDatabase()">Clear Database</button> -->
    <button onclick="dropTable()">Drop table from Database</button>
    <div class="dropdown">
      <button class="dropbtn">Select UCID</button>
      <div class="dropdown-content" id="ucidDropdownContainer">
        <!-- Dropdown items will be inserted here dynamically -->
      </div>
    </div>
  </header>
  <h1>Cryptocurrency Prices</h1>
  
  <table border="1">
    <thead>
      <tr>
        <th>ID</th>
        <th>Status Timestamp</th>
        <th>Symbol</th>
        <th>Name</th>
        <th>Price (USD)</th>
        <th>15 min Change (%)</th>
        <th>30 min Change (%)</th>
        <th>1 Hour Change (%)</th>
        <th>24 Hour Change (%)</th>
      </tr>
    </thead>
    <tbody id="recordsTableBody">
    <!-- database records are dynamically created here -->
      
    </tbody>
  </table>
  <script>

document.addEventListener('DOMContentLoaded', () => { 
    //get all data
  fetch('/get-from-db')
    .then(response => response.json())
    .then(data => { 
      // console.log(data)
      const dropdownContainer = document.getElementById('ucidDropdownContainer');
      const searchInput = document.createElement('input'); // Create the search input field
      const dropdown = document.createElement('div'); // Create the dropdown container for options

      searchInput.type = 'text';
      searchInput.placeholder = 'Search UCIDs...';
      dropdown.id = 'ucidDropdown';
      dropdownContainer.appendChild(searchInput);
      dropdownContainer.appendChild(dropdown);

      // Function to populate the dropdown with filtered data
      const populateDropdown = (filteredData) => {
        dropdown.innerHTML = ''; // Clear current dropdown options

        // If no matches, show 'No results found'
        if (filteredData.length === 0) {
          const noResult = document.createElement('div');
          noResult.textContent = 'No results found';
          dropdown.appendChild(noResult);
          return; // Exit function if no results
        }

        // Populate dropdown with filtered data
        filteredData.forEach(row => {
          const option = document.createElement('a');
          option.href = '#';
          option.textContent = row.name; // Adjust key based on your data
          option.onclick = () => handleAction(row.UCID);
          dropdown.appendChild(option);
        });
      };

      // Initially populate the dropdown with all data
      populateDropdown(data);

      // Add an event listener to filter and update dropdown based on input
      searchInput.addEventListener('input', (event) => {
        const query = event.target.value.toLowerCase();
        console.log("query is : ", query);

        // Filter data based on the user's input
        const filteredData = data.filter(row => row.name.toLowerCase().includes(query));

        console.log("filtered is : ", filteredData);

        // Populate dropdown with filtered data
        populateDropdown(filteredData);
      });
      refreshDataOnPage(data)
    })
    .catch(error => console.error('Error fetching records:', error));
});

// document.addEventListener('DOMContentLoaded', () => {
//   //Fetch all records from database on page load
     
//   //Fetch the UCIDs on page load
//   fetch('/get-ucids')
//     .then(response => response.json())
//     .then(data => {
//       const dropdownContainer = document.getElementById('ucidDropdownContainer');
//       const searchInput = document.createElement('input'); // Create the search input field
//       const dropdown = document.createElement('div'); // Create the dropdown container for options

//       searchInput.type = 'text';
//       searchInput.placeholder = 'Search UCIDs...';
//       dropdown.id = 'ucidDropdown';
//       dropdownContainer.appendChild(searchInput);
//       dropdownContainer.appendChild(dropdown);

//       // Function to populate the dropdown with filtered data
//       const populateDropdown = (filteredData) => {
//         dropdown.innerHTML = ''; // Clear current dropdown options

//         // If no matches, show 'No results found'
//         if (filteredData.length === 0) {
//           const noResult = document.createElement('div');
//           noResult.textContent = 'No results found';
//           dropdown.appendChild(noResult);
//           return; // Exit function if no results
//         }

//         // Populate dropdown with filtered data
//         filteredData.forEach(row => {
//           const option = document.createElement('a');
//           option.href = '#';
//           option.textContent = row.name; // Adjust key based on your data
//           option.onclick = () => handleAction(row.UCID);
//           dropdown.appendChild(option);
//         });
//       };

//       // Initially populate the dropdown with all data
//       populateDropdown(data);

//       // Add an event listener to filter and update dropdown based on input
//       searchInput.addEventListener('input', (event) => {
//         const query = event.target.value.toLowerCase();
//         console.log("query is : ", query);

//         // Filter data based on the user's input
//         const filteredData = data.filter(row => row.name.toLowerCase().includes(query));

//         console.log("filtered is : ", filteredData);

//         // Populate dropdown with filtered data
//         populateDropdown(filteredData);
//       });
//     })
//     .catch(error => console.error('Error fetching UCIDs:', error));
// });


function handleAction(ucid) {    // Logic for clicking on a coin name from the drop down to filter the records and display them. 
      console.log('UCID selected:', ucid);
      // Make a GET request to the server with the selected UCID as a query parameter
        fetch(`/filtered?ucid=${ucid}`)
          .then(response => response.json()) // Assuming the server responds with JSON data
          .then(data => {
          
            // Reload the page to reflect the changes
            refreshDataOnPage(data)
  })
  .catch(error => console.error('Error fetching records:', error));
} 


    // Function to call the fetchDataAndSave route
    async function fetchAndSaveData() {
      try {
        const response = await fetch('/fetch-save-get', { method: 'POST' });
        
        if (response.ok) {
          const records = await response.json();
          
          //REFRESH THE DATA ELEMENT WITH THE NEW DATA.
          refreshDataOnPage(records)
        } else {
          console.error('Error fetching and saving data');
        }
      } catch (error) {
        console.error('Error:', error);
      }
    }

    // Function to call the clearDatabase route
    // async function clearDatabase() {
    //   try {
    //     const response = await fetch('/clearDatabase', { method: 'POST' });
    //     if (response.ok) {
    //       alert('Database cleared successfully!');
    //       // const records = await fetch('/get-from-db', {method: 'POST'});
    //       // console.log("remaining records ", records)
    //       location.reload()
    //       // refreshDataOnPage(records.json); // Reload page to update displayed records
    //     } else {
    //       alert('Failed to clear database.');
    //     }
    //   } catch (error) {
    //     console.error('Error:', error);
    //     alert('Error clearing database.');
    //   }
    // }

    async function dropTable() {
      try {
        const response = await fetch('/dropTable', { method: 'POST' });
        if (response.ok) {
          alert('Database dropped successfully!');
          location.reload() // Reload page to update displayed records
        } else {
          alert('Failed to drop database.');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Error dropping database.');
      }
    }

    function refreshDataOnPage(data=null) {
      const tableBody = document.getElementById('recordsTableBody');
            tableBody.innerHTML = ''; // Clear current records

        data.forEach(record => {
          const row = document.createElement('tr');
          row.innerHTML = `
              <td>${record.id}</td>
              <td>${record.status_timestamp.split('.')[0]}</td>
              <td>${record.symbol}</td>
              <td>${record.name}</td>
              <td class="align-right">${parseFloat(record.price).toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</td>
              <td class="${record.percent_change_15m > 0 ? 'positive' : 'negative'}">${parseFloat(record.percent_change_15m).toFixed(3)}</td>
              <td class="${record.percent_change_30m > 0 ? 'positive' : 'negative'}">${parseFloat(record.percent_change_30m).toFixed(3)}</td>
              <td class="${record.percent_change_1h > 0 ? 'positive' : 'negative'}">${parseFloat(record.percent_change_1h).toFixed(3)}</td>
              <td class="${record.percent_change_24h > 0 ? 'positive' : 'negative'}">${parseFloat(record.percent_change_24h).toFixed(3)}</td>
            `;
          tableBody.appendChild(row);
     });
  }
  </script>
</body>
</html>